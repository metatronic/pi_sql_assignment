--FUNCTIONS
--1.	TAKE PRODUCTNAME AS PARAMETER AND RETURN UNITPRICE
CREATE FUNCTION UNITPRICEFROMPRODUCT (@PRODUCTNAME VARCHAR(20))
RETURNS NUMERIC(7,2) AS
BEGIN
	DECLARE @UNITPRICE NUMERIC(7,2)
	SELECT @UNITPRICE=P.UNITPRICE FROM PRODUCTS P WHERE P.PRODUCTNAME = @PRODUCTNAME
	RETURN @UNITPRICE
END

SELECT DBO.UNITPRICEFROMPRODUCT('CHANG')


--2.	TAKE PRODUCTNAME AS PARAMETER AND RETURN UNITSINSTOCK AND UNINTSONORDER
SP_HELP 'PRODUCTS'
CREATE FUNCTION UNITSSTOKC_FROM_PRODUCTNAME (@PRODUCTNAME VARCHAR(20))
RETURNS @TABLE TABLE(UNITSINSTOCK SMALLINT, UNITSONORDER SMALLINT) AS
BEGIN
	INSERT INTO @TABLE SELECT P.UNITSINSTOCK, P.UNITSONORDER FROM PRODUCTS P WHERE P.PRODUCTNAME = @PRODUCTNAME
	RETURN
END

SELECT * FROM DBO.UNITSSTOKC_FROM_PRODUCTNAME('CHANG')


--3.	TAKE POSTALCODE AS PARAMETER AND RETURN CUSTOMER NAME. IF POSTAL CODE IS NOT VALID DISPLAY ERROR MESSAGE
SELECT * FROM CUSTOMERS
CREATE FUNCTION CUSTOMERNAMEFROMPOSTAL(@POSTAL VARCHAR(20))
RETURNS VARCHAR(40)AS
BEGIN
	DECLARE @COMNAME VARCHAR(40)
	SELECT @COMNAME=C.COMPANYNAME FROM CUSTOMERS C WHERE C.POSTALCODE = @POSTAL
	IF @COMNAME IS NULL
	BEGIN
		RETURN CAST('POSTAL CODE DOES NOT EXIST' AS INT)
	END
	RETURN @COMNAME
END

SELECT DBO.CUSTOMERNAMEFROMPOSTAL('10101')


--4.	TAKE COUNTRY AS PARAMETER AND RETURN CITY AND POSTALCODE FOR A CUSTOMERS
SELECT * FROM CUSTOMERS WHERE COUNTRY = 'GERMANY'
CREATE FUNCTION CITYPOSTAL_FROM_COUNTRY (@COUNTRY VARCHAR(20))
RETURNS @TABLE TABLE(CITY VARCHAR(20), POSTAL VARCHAR(20)) AS
BEGIN
	INSERT INTO @TABLE SELECT C.CITY, C.POSTALCODE FROM CUSTOMERS C WHERE C.COUNTRY = @COUNTRY
	RETURN
END

SELECT * FROM DBO.CITYPOSTAL_FROM_COUNTRY('GERMANY')


--5.	TAKE EMPLOYEE FIRSTNAME AND LASTNAME AS PARAMETER AND RETURN ALL CUSTOMERS COMPANY NAME,  CONTACTNAME, CONTACTTILE
CREATE FUNCTION COMPANY_FROM_EMPLOYEE(@FIRSTNAME VARCHAR(20), @LASTNAME VARCHAR(20))
RETURNS @TABLE TABLE(COMPANYNAME VARCHAR(50), CONTACTNAME VARCHAR(50), CONTACTTITLE VARCHAR(50)) AS
BEGIN
	INSERT INTO @TABLE
	SELECT COMPANYNAME, CONTACTNAME, CONTACTTITLE FROM CUSTOMERS 
	WHERE CUSTOMERID IN (SELECT CUSTOMERID FROM ORDERS WHERE EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEES WHERE FIRSTNAME=@FIRSTNAME AND LASTNAME=@LASTNAME))
	RETURN
END

SELECT * FROM DBO.COMPANY_FROM_EMPLOYEE('JANET','LEVERLING')


--6.	TAKE YEAR AND EMPLOYEENAME AND DISPLAY AMOUNT OF ORDERS HANDLE  BY THE EMPLOYEE IN A YEAR  (SUM OF QUANTITY)
SELECT * FROM EMPLOYEES
CREATE FUNCTION ORDERCOUNT_BY_EMPLOYEE (@YEAR INT, @EMPLOYEENAME VARCHAR(20))
RETURNS INT AS
BEGIN
	DECLARE @SUM INT
	SELECT @SUM = COUNT(O.ORDERID) FROM ORDERS O
	WHERE O.EMPLOYEEID IN (SELECT EMPLOYEEID E FROM EMPLOYEES E WHERE E.FIRSTNAME = @EMPLOYEENAME) AND DATEPART(YYYY,O.ORDERDATE) = @YEAR
	RETURN @SUM
END

SELECT DBO.ORDERCOUNT_BY_EMPLOYEE(1998,'NANCY')


--7.	TAKE YEAR AND MONTH AS PARAMETER AND RETURN NO OF ORDERS SHIPPED IN THE GIVEN MONTH
CREATE FUNCTION NOOFORDERS_BYYEAR(@YEAR INT, @MONTH INT)
RETURNS INT AS
BEGIN
	DECLARE @SUM INT
	SELECT @SUM = COUNT(O.ORDERID) FROM ORDERS O 
	WHERE DATEPART(YYYY,O.SHIPPEDDATE) = @YEAR AND DATEPART(MM,O.SHIPPEDDATE) = @MONTH
	RETURN @SUM
END

SELECT DBO.NOOFORDERS_BYYEAR(1998,3)


--8.	TAKE PRODUCTNAME AS PARAMTER AND RETURN TOTLA UNITS OF ORDER PLACED FOR THE PRODUCT (SUM(ORDERED QUANTITY)
--Hint: use Products and [Order Details] table
SELECT * FROM PRODUCTS
ALTER FUNCTION TOTTALUNITS_FROM_PRODUCTNAME(@PRODUCTNAME VARCHAR(20))
RETURNS INT AS
BEGIN
	DECLARE @SUM INT
	SELECT @SUM = SUM(QUANTITY) FROM [ORDER DETAILS] OD
	WHERE OD.PRODUCTID IN (SELECT P.PRODUCTID FROM PRODUCTS P WHERE PRODUCTNAME = @PRODUCTNAME)
	RETURN @SUM
END

SELECT DBO.TOTTALUNITS_FROM_PRODUCTNAME('CHANG')


--9.       TAKE ORDERID AS PARAMETER AND RETURN TOTAL UNITS OF ORDER PLACE FOR THE ORDERID
SELECT * FROM [ORDER DETAILS]
CREATE FUNCTION TOTALUNITS_FROM_ORDERS(@ORDERID INT)
RETURNS INT AS
BEGIN
	DECLARE @SUM INT
	SELECT @SUM = SUM(QUANTITY) FROM [ORDER DETAILS] WHERE ORDERID = @ORDERID
	RETURN @SUM
END

SELECT DBO.TOTALUNITS_FROM_ORDERS(10249)
