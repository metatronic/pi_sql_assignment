CREATE TABLE CLIENT_MASTER
(
	CLIENT_NO VARCHAR(6) CHECK(CLIENT_NO LIKE 'C%') PRIMARY KEY,
	NAME VARCHAR(20) NOT NULL,
	CITY VARCHAR(15),
	STATE VARCHAR(15),
	PINCODE VARCHAR(6),
	BAL_DUE NUMERIC(10,2)
)

CREATE TABLE PRODUCT_MASTER
(
	PRODUCT_NO VARCHAR(6) CHECK(PRODUCT_NO LIKE 'P%') PRIMARY KEY,
	DESCRIPTION VARCHAR(50) NOT NULL,
	PROFIT_PERCENT NUMERIC(3,2) NOT NULL,
	UNIT_MEASURE VARCHAR(10) NOT NULL,
	QTY_ON_HAND NUMERIC(8) NULL,
	RECORD_LVL NUMERIC(8) NOT NULL,
	SELL_PRICE NUMERIC(8,2) CHECK(SELL_PRICE > 0) NOT NULL,
	COST_PRICE NUMERIC(8,2) CHECK(COST_PRICE > 0) NOT NULL,
)

CREATE TABLE SALESMAN_MASTER
(
	SALESMAN_NO VARCHAR(6) CHECK(SALESMAN_NO LIKE 'S%') PRIMARY KEY,
	SALESMAN_NAME VARCHAR(20) NOT NULL,
	ADDRESS1 VARCHAR(30) NOT NULL,
	ADDRESS2 VARCHAR(30),
	CITY VARCHAR(20),
	PINCODE VARCHAR(6),
	STATE VARCHAR(20),
	SAL_AMT NUMERIC(8,2) CHECK(SAL_AMT > 0) NOT NULL,
	TGT_TO_GET NUMERIC(6,2) CHECK(TGT_TO_GET > 0) NOT NULL,
	YTD_SALES NUMERIC(6,2) NOT NULL,
	REMARKS VARCHAR(60)
)

CREATE TABLE SALES_ORDER
(
	S_ORDER_NO VARCHAR(6) CHECK(S_ORDER_NO LIKE 'O%') PRIMARY KEY,
	S_ORDER_DATE DATE,
	CLIENT_NO VARCHAR(6) REFERENCES CLIENT_MASTER(CLIENT_NO),
	DELY_ADDR VARCHAR(25),
	SALESMAN_NO VARCHAR(6) REFERENCES SALESMAN_MASTER(SALESMAN_NO),
	DELY_TYPE CHAR(1) CHECK(DELY_TYPE IN('P','F')) DEFAULT 'F',
	BILLED_YN CHAR(1) CHECK(BILLED_YN IN('Y','N')) DEFAULT 'N',
	DELY_DATE DATE,
	ORDER_STATUS VARCHAR (10) CHECK(ORDER_STATUS IN ('IN PROCESS','FULLFILLED','BACKORDER','CANCELED'))
)

CREATE TABLE SALES_ORDER_DETAILS
(
	S_ORDER_NO VARCHAR(6) REFERENCES SALES_ORDER(S_ORDER_NO),
	PRODUCT_NO VARCHAR(6) REFERENCES PRODUCT_MASTER(PRODUCT_NO),
	QTY_ORDERED NUMERIC(8),
	QTY_DISP NUMERIC(8),
	PRODUCT_RATE NUMERIC(10,2)
)

CREATE TABLE CHALLAN_HEADER
(
	CHALLAN_NO VARCHAR(6) CHECK(CHALLAN_NO LIKE 'CH%') PRIMARY KEY,
	S_ORDER_NO VARCHAR(6) REFERENCES SALES_ORDER(S_ORDER_NO),
	CHALLAN_DATE DATE NOT NULL,
	BILLED_YN CHAR(1) CHECK(BILLED_YN IN('Y','N')) DEFAULT 'N'
)

CREATE TABLE CHALLAN_DETAILS
(
	CHALLAN_NO VARCHAR(6) REFERENCES CHALLAN_HEADER(CHALLAN_NO),
	PRODUCT_NO VARCHAR(6) REFERENCES PRODUCT_MASTER(PRODUCT_NO),
	QTY_DISP NUMERIC(4,2) NOT NULL,
	PRIMARY KEY(CHALLAN_NO, PRODUCT_NO)
)

INSERT INTO CLIENT_MASTER(CLIENT_NO,NAME,CITY,PINCODE,STATE,BAL_DUE)
VALUES
	('C00001','Ivan Bayross','Bombay','400054' ,'Maharashtra', 15000),
	('C00002','Vandana Saitwal','Madras','780001','Tamil Nadu',0),
	('C00003','Pramada Jaguste','Bombay','400057','Maharashtra',5000),
	('C00004','Basu Navindgi','Bombay','400056','Maharashtra',0),
	('C00005','Ravi Sreedharan','Delhi','100001','Delhi',2000),
	('C00006','Rukmini','Bombay','400050','Maharashtra',0)

INSERT INTO PRODUCT_MASTER(PRODUCT_NO,DESCRIPTION,PROFIT_PERCENT,UNIT_MEASURE,QTY_ON_HAND,RECORD_LVL,SELL_PRICE,COST_PRICE)
VALUES
	('P00001','1.44 Floppies',5,'Piece',100,20,525,500),
	('P03453','Monitors',6,'Piece',10,3,12000,11280),
	('P06734','Mouse', 5, 'Piece' ,20 ,5,1050,1000),
	('P07865','1.22 Floppies',5 ,'Piece',100,20,525,500),
	('P07868','Keyboards',2 ,'Piece',10,3,3150,3050),
	('P07885','CD Drive' ,2.5 ,'Piece',10,3,5250,5100),
	('P07965','540 HDD',4,'Piece',10 ,3,8400,8000),
	('P07975','1.44 Drive',5 ,'Piece',10,3,1050,1000),
	('P08865','1.22 Drive',5 ,'Piece',2,3,1050,1000)

INSERT INTO SALESMAN_MASTER(SALESMAN_NO,SALESMAN_NAME,ADDRESS1,ADDRESS2,CITY,PINCODE,STATE,SAL_AMT,TGT_TO_GET,YTD_SALES,REMARKS)
VALUES
	('S00001','Kiran','A/14','Worli','Bombay','400002','MAH',3000,100 ,50 ,'Good'),
	('S00002','Manish','65','Nariman','Bombay','400001','MAH',3000,200,100,'Good'),
	('S00003','Ravi','P-7','Bandra','Bombay','400032','MAH',3000,200,100,'Good'),
	('S00004','Ashish','A/5','Juhu','Bombay','400044','MAH',3500 ,200 ,150,'Good')

INSERT INTO SALES_ORDER(S_ORDER_NO,S_ORDER_DATE,CLIENT_NO,DELY_TYPE,BILLED_YN,SALESMAN_NO,DELY_DATE,ORDER_STATUS)
VALUES
	('O19001','12-Jan-1996','C00001','F','N','S00001','20-Jan-1996','IN PROCESS'),
	('O19002','25-Jan-1996','C00002','P','N','S00002','27-Jan-1996','CANCELED'),
	('O46865','18-Feb-1996','C00003','F','Y','S00003','20-Feb-1996','FULLFILLED'),
	('O19003','03-Apr-1996','C00001','F','Y','S00001','07-Apr-1996','FULLFILLED'),
	('O46866','20-May-1996','C00004','P','N','S00002','22-May-1996','CANCELED'),
	('O10008','24-May-1996','C00005','F','N','S00004','26-May-1996','IN PROCESS')


INSERT INTO SALES_ORDER_DETAILS(S_ORDER_NO,PRODUCT_NO,QTY_ORDERED,QTY_DISP,PRODUCT_RATE)
VALUES
	('O19001','P00001',4,4,525),
	('O19001','P07965',2,1,8400),
	('O19001','P07885',2,1,5250),
	('O19002','P00001',10,0,525),
	('O46865','P07868',3,3,3150),
	('O46865','P07885',3,1,5250),
	('O46865','P00001',10,10,525),
	('O46865','P03453',4,4,1050),
	('O19003','P03453',2,2,1050),
	('O19003','P06734',1,1,12000),
	('O46866','P07965',1,0,8400),
	('O46866','P07975',1,0,1050),
	('O10008','P00001',10,5,525),
	('O10008','P07975',5,3,1050)

INSERT INTO CHALLAN_HEADER(CHALLAN_NO,S_ORDER_NO,CHALLAN_DATE,BILLED_YN)
VALUES
	('CH9001','O19001','12-Dec-1995','Y'),
	('CH6865','O46865','12-Nov-1995','Y'),
	('CH3965','O10008','12-Oct-1995','Y')


INSERT INTO CHALLAN_DETAILS(CHALLAN_NO,PRODUCT_NO,QTY_DISP)
VALUES
	('CH9001' ,'P00001' ,4),
	('CH9001' ,'P07965' ,1),
	('CH9001' ,'P07885' ,1),
	('CH6865' ,'P07868' ,3),
	('CH6865' ,'P03453' ,4),
	('CH6865' ,'P00001' ,10),
	('CH3965' ,'P00001' ,5),
	('CH3965' ,'P07975' ,2)



--1) Find out the names of all the clients. 
SELECT CM.NAME FROM CLIENT_MASTER CM

--2) Print the entire client_master table. 
SELECT * FROM CLIENT_MASTER

--3) Retrieve the list of names and the cities of all the clients 
SELECT CM.NAME, CM.CITY FROM CLIENT_MASTER CM

--4) List the various products available from the product_master table. 
SELECT PM.DESCRIPTION FROM PRODUCT_MASTER PM

--5) Find the names of all clients having ‘a’ as the second letter in their  table. 
SELECT CM.NAME FROM CLIENT_MASTER CM WHERE CM.NAME LIKE '_A%'

--6) Find the names of all clients who stay in a city whose second letter is  ‘a’ 
SELECT CM.NAME FROM CLIENT_MASTER CM WHERE CM.CITY LIKE '_A%'

--7) Find out the clients who stay in a city ‘Bombay’ or city ‘Delhi’ or city  ‘Madras’. 
SELECT * FROM CLIENT_MASTER CM WHERE CM.CITY IN ('BOMBAY','MADRAS','DELHI')

--8) List all the clients who are located in Bombay. 
SELECT * FROM CLIENT_MASTER CM WHERE CM.CITY = 'BOMBAY'

--9) Print the list of clients whose bal_due are greater than value 10000
SELECT * FROM CLIENT_MASTER CM WHERE CM.BAL_DUE > 10000

--10) Print the information from sales_order table of orders placed  in the month of January. 
SELECT * FROM SALES_ORDER SO WHERE DATEPART(MM,SO.S_ORDER_DATE) = 1

--11) Display the order information for client_no ‘C00001’ and  ‘C00002’
SELECT * FROM SALES_ORDER SO WHERE SO.CLIENT_NO IN ('C00001','C00002')

--12) Find the products with description as ‘1.44 Drive’ and ‘1.22 Drive’ 
SELECT * FROM PRODUCT_MASTER PM WHERE PM.DESCRIPTION IN ('1.44 Drive','1.22 Drive')

--13) Find the products whose selling price is greater than 2000 and  less than or equal to 5000 
SELECT * FROM PRODUCT_MASTER PM WHERE PM.SELL_PRICE > 2000 AND PM.SELL_PRICE <=5000

--14) Find the products whose selling price is more than 1500 and  also find the new selling price as original selling price * 15 
SELECT *, PM.SELL_PRICE*15 FROM PRODUCT_MASTER PM WHERE PM.SELL_PRICE > 1500

--15) Rename the new column in the above query as new_price
SELECT *, PM.SELL_PRICE*15 AS [NEW_PRICE] FROM PRODUCT_MASTER PM WHERE PM.SELL_PRICE > 1500

--16) Find the products whose cost price is less than 1500 
SELECT * FROM PRODUCT_MASTER PM WHERE PM.COST_PRICE<1500

--17) List the products in sorted order of their description. 
SELECT * FROM PRODUCT_MASTER PM ORDER BY PM.DESCRIPTION

--18) Calculate the square root the price of each product. 
SELECT *,SQRT(PM.COST_PRICE) FROM PRODUCT_MASTER PM

--19) Divide the cost of product ‘540 HDD’ by difference between its  price and 100 
SELECT PM.COST_PRICE/ABS(100 - PM.COST_PRICE) FROM PRODUCT_MASTER PM WHERE PM.DESCRIPTION = '540 HDD'

--20) List the names, city and state of clients not in the state of  Maharashtra 
SELECT CM.NAME,CM.CITY,CM.STATE FROM CLIENT_MASTER CM WHERE CM.STATE != 'MAHARASHTRA'

--21) List the product_no, description, sell_price of products whose  description begin with letter ‘M’ 
SELECT PM.PRODUCT_NO,PM.DESCRIPTION,PM.SELL_PRICE FROM PRODUCT_MASTER PM WHERE PM.DESCRIPTION LIKE 'M%'

--22) List all the orders that were canceled in the month of May. 
SELECT * FROM SALES_ORDER SO WHERE SO.ORDER_STATUS = 'CANCELED' AND DATEPART(MM,SO.S_ORDER_DATE) = 5

--23) Count the total numeric of orders. 
SELECT COUNT(SO.S_ORDER_DATE) FROM SALES_ORDER SO

--24) Calculate the average price of all the products. 
SELECT AVG(PM.COST_PRICE) FROM PRODUCT_MASTER PM

--25) Calculate the minimum price of products. 
SELECT MIN(PM.COST_PRICE) FROM PRODUCT_MASTER PM

--26) Determine the maximum and minimum product prices.  Rename the title as max_price and min_price respectively. 
SELECT MAX(PM.COST_PRICE) AS MAX_PRICE, MIN(PM.COST_PRICE) AS MIN_PRICE FROM PRODUCT_MASTER PM

--27) Count the numeric of products having price greater than or  equal to 1500. 
SELECT COUNT(PM.PRODUCT_NO) FROM PRODUCT_MASTER PM WHERE PM.COST_PRICE >= 1500

--28) Find all the products whose qty_on_hand is less than reorder  level. 
SELECT * FROM PRODUCT_MASTER PM WHERE PM.QTY_ON_HAND < PM.RECORD_LVL

--29) Print the information of client_master, product_master,  sales_order table in the following formate for all the records {cust_name} has placed order {order_no} on {s_order_date}.
DECLARE @CNAME VARCHAR(20), @ORDERNO VARCHAR(6), @ORDERDATE DATE
DECLARE SALECURSOR CURSOR FOR SELECT CM.NAME, SO.S_ORDER_NO, SO.S_ORDER_DATE FROM SALES_ORDER SO JOIN CLIENT_MASTER CM ON SO.CLIENT_NO = CM.CLIENT_NO
OPEN SALECURSOR
FETCH NEXT FROM SALECURSOR INTO @CNAME, @ORDERNO, @ORDERDATE
WHILE @@FETCH_STATUS = 0
BEGIN
	PRINT @CNAME +' HAS PLACED ORDER '+@ORDERNO+' ON '+CONVERT(VARCHAR,@ORDERDATE,5)
	FETCH NEXT FROM SALECURSOR INTO @CNAME, @ORDERNO, @ORDERDATE
END
CLOSE SALECURSOR
DEALLOCATE SALECURSOR

--30) Print the description and total qty sold for each product.
SELECT PM.DESCRIPTION, SUM(SOD.QTY_ORDERED) AS TOTAL_QTY_SOLD FROM PRODUCT_MASTER PM JOIN SALES_ORDER_DETAILS SOD ON PM.PRODUCT_NO = SOD.PRODUCT_NO GROUP BY PM.DESCRIPTION

--31) Find the value of each product sold. 
SELECT SOD.PRODUCT_NO, SUM(SOD.QTY_ORDERED * SOD.PRODUCT_RATE) AS TOTAL_VALUE FROM SALES_ORDER_DETAILS SOD GROUP BY SOD.PRODUCT_NO

--32) Calculate the average qty sold for each client that has a  maximum order value of 15000.00 
SELECT SO.CLIENT_NO, AVG(SOD.QTY_ORDERED) FROM SALES_ORDER SO JOIN SALES_ORDER_DETAILS SOD ON SO.S_ORDER_NO = SOD.S_ORDER_NO
GROUP BY SO.CLIENT_NO HAVING SUM(SOD.QTY_ORDERED * SOD.PRODUCT_RATE) > 10000

--33) Find out the total sales amount receivable for the month of jan. it will be the sum total of all the billed orders for the month. 
SELECT ISNULL(SUM(SOD.QTY_ORDERED * SOD.PRODUCT_RATE),0) FROM SALES_ORDER SO JOIN SALES_ORDER_DETAILS SOD ON SO.S_ORDER_NO = SOD.S_ORDER_NO
WHERE SO.BILLED_YN = 'Y' AND DATEPART(MM,SO.S_ORDER_DATE) = 1

--34) Print the information of product_master, order_detail table in  the following format for all the records 
--{Description} worth Rs. {Total sales for the product} was sold. 
DECLARE @PDESC VARCHAR(20), @TOTALSALE NUMERIC(10,2)
DECLARE PRODCURSOR CURSOR FOR 
SELECT PM.DESCRIPTION,SUM(SOD.QTY_ORDERED * SOD.PRODUCT_RATE) FROM SALES_ORDER_DETAILS SOD JOIN PRODUCT_MASTER PM ON SOD.PRODUCT_NO = PM.PRODUCT_NO 
GROUP BY PM.DESCRIPTION
OPEN PRODCURSOR
FETCH NEXT FROM PRODCURSOR INTO @PDESC, @TOTALSALE
WHILE @@FETCH_STATUS = 0
BEGIN
	PRINT @PDESC +' WORTH RS. ' + CONVERT(VARCHAR,@TOTALSALE) +' WAS SOLD'
	FETCH NEXT FROM PRODCURSOR INTO @PDESC, @TOTALSALE
END
CLOSE PRODCURSOR
DEALLOCATE PRODCURSOR

--35) Print the information of product_master, order_detail table in  the following format for all the records 
--{Description} worth Rs. {Total sales for the product} was produced in  the month of {s_order_date} in month formate. 
DECLARE @PDESCM VARCHAR(20), @TOTALSALEM NUMERIC(10,2), @MONTH VARCHAR(10)
DECLARE PRODCURSOR CURSOR FOR
SELECT PM.DESCRIPTION,DATENAME(MONTH,SO.S_ORDER_DATE),SUM(SOD.QTY_ORDERED * SOD.PRODUCT_RATE) FROM SALES_ORDER_DETAILS SOD JOIN PRODUCT_MASTER PM ON SOD.PRODUCT_NO = PM.PRODUCT_NO
JOIN SALES_ORDER SO ON SOD.S_ORDER_NO = SO.S_ORDER_NO
GROUP BY PM.DESCRIPTION, DATENAME(MONTH,SO.S_ORDER_DATE)
OPEN PRODCURSOR
FETCH NEXT FROM PRODCURSOR INTO @PDESCM, @MONTH, @TOTALSALEM
WHILE @@FETCH_STATUS = 0
BEGIN
	PRINT @PDESCM +' WORTH RS. ' + CONVERT(VARCHAR,@TOTALSALEM) +' WAS SOLD IN THE MONTH OF ' + @MONTH
	FETCH NEXT FROM PRODCURSOR INTO @PDESCM, @MONTH, @TOTALSALEM
END
CLOSE PRODCURSOR
DEALLOCATE PRODCURSOR

--36) Find out the products which has been sold to ‘Ivan Bayross’
SELECT * FROM PRODUCT_MASTER PM WHERE PM.PRODUCT_NO IN
	(SELECT SOD.PRODUCT_NO FROM SALES_ORDER_DETAILS SOD WHERE SOD.S_ORDER_NO IN
		(SELECT SO.S_ORDER_NO FROM SALES_ORDER SO WHERE SO.CLIENT_NO IN 
			(SELECT CM.CLIENT_NO FROM CLIENT_MASTER CM WHERE CM.NAME= 'Ivan Bayross' )))

--37) Find out the products and their quantities that will have to  deliver in the current month. 
SELECT PM.PRODUCT_NO, PM.DESCRIPTION, SOD.QTY_ORDERED FROM SALES_ORDER_DETAILS SOD JOIN PRODUCT_MASTER PM ON SOD.PRODUCT_NO = PM.PRODUCT_NO
WHERE SOD.S_ORDER_NO IN (SELECT SO.S_ORDER_NO FROM SALES_ORDER SO WHERE DATEPART(MM,SO.DELY_DATE) = DATEPART(MM,GETDATE()))

--38) Find the product_no and description of moving products. 
SELECT PM.PRODUCT_NO, PM.DESCRIPTION FROM PRODUCT_MASTER PM WHERE PM.PRODUCT_NO IN (SELECT SOD.PRODUCT_NO FROM SALES_ORDER_DETAILS SOD)

--39) Find the names of clients who have purchased ‘CD Drive’
SELECT CM.NAME FROM CLIENT_MASTER CM WHERE CM.CLIENT_NO IN
	(SELECT SO.CLIENT_NO FROM SALES_ORDER SO WHERE SO.S_ORDER_NO IN
		(SELECT SOD.S_ORDER_NO FROM SALES_ORDER_DETAILS SOD WHERE SOD.PRODUCT_NO IN
			(SELECT PM.PRODUCT_NO FROM PRODUCT_MASTER PM WHERE PM.DESCRIPTION = 'CD Drive')))

--40) List the product_no and s_order_no of customers having qty_ordered less than 5 from the order details table for the product  ‘1.44 floppies’ 
SELECT SOD.PRODUCT_NO,SOD.S_ORDER_NO FROM SALES_ORDER_DETAILS SOD WHERE SOD.PRODUCT_NO IN
	(SELECT PM.PRODUCT_NO FROM PRODUCT_MASTER PM WHERE PM.DESCRIPTION = '1.44 floppies') AND SOD.QTY_ORDERED < 5

--41) Find the products and their quantities for the orders placed by  ‘Vandana Saitwal’ and ‘Ivan Bayross’ 
SELECT PM.*, SOD.QTY_ORDERED FROM PRODUCT_MASTER PM JOIN SALES_ORDER_DETAILS SOD ON SOD.PRODUCT_NO = PM.PRODUCT_NO
JOIN SALES_ORDER SO ON SOD.S_ORDER_NO = SO.S_ORDER_NO
WHERE SO.CLIENT_NO IN (SELECT CM.CLIENT_NO FROM CLIENT_MASTER CM WHERE CM.NAME IN ('Vandana Saitwal','Ivan Bayross'))

--42) Find the products and their quantities for the orders placed by  client_no ‘C00001’ and ‘C00002’ 
SELECT PM.*, SOD.QTY_ORDERED FROM PRODUCT_MASTER PM JOIN SALES_ORDER_DETAILS SOD ON SOD.PRODUCT_NO = PM.PRODUCT_NO
JOIN SALES_ORDER SO ON SOD.S_ORDER_NO = SO.S_ORDER_NO
WHERE SO.CLIENT_NO IN ('C00001','C00002')

--43) Find the product_no and description of non-moving products. 
SELECT PM.PRODUCT_NO, PM.DESCRIPTION FROM PRODUCT_MASTER PM WHERE PM.PRODUCT_NO NOT IN (SELECT SOD.PRODUCT_NO FROM SALES_ORDER_DETAILS SOD)

--44) Find the customer name, address1, address2, city and pin code  for the client who has placed order no ‘O19001’ 
SELECT CM.NAME,CM.STATE,CM.CITY, CM.PINCODE FROM CLIENT_MASTER CM WHERE CM.CLIENT_NO IN (SELECT SO.CLIENT_NO FROM SALES_ORDER SO WHERE SO.S_ORDER_NO = 'O19001')

--45) Find the client names who have placed orders before the  month of May, 1996
SELECT CM.NAME FROM CLIENT_MASTER CM WHERE CM.CLIENT_NO IN (SELECT SO.CLIENT_NO FROM SALES_ORDER SO WHERE SO.S_ORDER_DATE < '1-MAY-1996')

--46) Find out if product ‘1.44 Drive’ is ordered by client and print  the client_no, name to whom it is was sold. 
IF EXISTS (SELECT * FROM SALES_ORDER_DETAILS SOD WHERE SOD.PRODUCT_NO IN (SELECT PM.PRODUCT_NO FROM PRODUCT_MASTER PM WHERE PM.DESCRIPTION = '1.44 Drive'))
BEGIN
	SELECT CM.CLIENT_NO,CM.NAME FROM CLIENT_MASTER CM WHERE CM.CLIENT_NO IN 
		(SELECT SO.CLIENT_NO FROM SALES_ORDER SO WHERE SO.S_ORDER_NO IN 
			(SELECT SOD.S_ORDER_NO FROM SALES_ORDER_DETAILS SOD WHERE SOD.PRODUCT_NO IN 
				(SELECT PM.PRODUCT_NO FROM PRODUCT_MASTER PM WHERE PM.DESCRIPTION = '1.44 Drive')))
END

--47) Find the names of clients who have placed orders worth Rs.  10000 or more.
SELECT CM.NAME FROM CLIENT_MASTER CM WHERE CM.CLIENT_NO IN
	(SELECT SO.CLIENT_NO FROM SALES_ORDER SO WHERE SO.S_ORDER_NO IN 
		(SELECT SOD.S_ORDER_NO FROM SALES_ORDER_DETAILS SOD GROUP BY SOD.S_ORDER_NO HAVING SUM(SOD.PRODUCT_RATE*SOD.QTY_ORDERED) > 10000))

--48) Display the order numeric and day on which clients placed  their order. 
SELECT SO.S_ORDER_NO, DATENAME(DW,SO.S_ORDER_DATE) FROM SALES_ORDER SO

--49) Display the month (in alphabets) and date when the order  must deliver. 
SELECT SO.S_ORDER_NO,DATENAME(MM,SO.DELY_DATE) AS DELY_MONTH, SO.DELY_DATE FROM SALES_ORDER SO

--50) Display the s_order_date in the format. E.g. 12-February-1996  
SELECT FORMAT(SO.S_ORDER_DATE,'dd-MMMM-yyyy') FROM SALES_ORDER SO

--51) Find the date, 15 days after today’s date. 
SELECT DATEADD(DD,15,GETDATE())

--52) Find the numeric of days elapsed between today’s date and  the delivery date of the orders placed by the clients. 
SELECT DATEDIFF(DD,SO.DELY_DATE,GETDATE()) FROM SALES_ORDER SO 

--53. In sales ordered detail table as pet the quantity ordered highest to  lowest assign the rank. Don’t miss any numeric 
SELECT DENSE_RANK() OVER (ORDER BY SO.QTY_ORDERED DESC) ,* FROM SALES_ORDER_DETAILS SO

--54.Display product master record along with record no 
SELECT ROW_NUMBER() OVER (ORDER BY PM.PRODUCT_NO) AS [RECORD NUMNER], * FROM PRODUCT_MASTER PM

--55.For sales ordered detail table assign row numeric for each  s_order_no.  
SELECT ROW_NUMBER() OVER (ORDER BY SO.S_ORDER_NO),* FROM SALES_ORDER_DETAILS SO

--56.Print s_order_no, qty ordered, qty disp, and difference. Also display  message if difference is 0 print all qty dispatched , if difference is <=5  few qty left to dispatched, else display difference is high 
SELECT SO.S_ORDER_NO, SO.QTY_ORDERED, SO.QTY_DISP, (SO.QTY_ORDERED - SO.QTY_DISP) AS [DIFFERENCE], CASE
WHEN SO.QTY_ORDERED - SO.QTY_DISP = 0 THEN 'ALL QTY DISPATCHED'
WHEN SO.QTY_ORDERED - SO.QTY_DISP <= 5 THEN 'FEW QTY LEFT TO DISPATCH'
ELSE 'DIFFERENCE IS HIGH'
END AS MESSAGE
FROM SALES_ORDER_DETAILS SO

--57. List salesman master detail along with rank as per the sal_amt 
SELECT RANK() OVER (ORDER BY SM.SAL_AMT),* FROM SALESMAN_MASTER SM

--58) Change the s_order_date of client_no ‘C00001’ to 24/07/96. 
UPDATE SALES_ORDER SET S_ORDER_DATE = '19960724' WHERE CLIENT_NO = 'C00001'

--59) Change the selling price of ‘1.44 Floppy Drive’ to Rs. 1150.00 
UPDATE PRODUCT_MASTER SET SELL_PRICE = 1150 WHERE DESCRIPTION = '1.44 Floppy Drive'

--60) Delete the records with order numeric ‘O19001’ from the  order table. 
DELETE SALES_ORDER WHERE S_ORDER_NO = 'O19001'

--61) Delete all the records having delivery date before 10th July’96
DELETE SALES_ORDER WHERE DELY_DATE < '10-JUL-96'

--62) Change the city of client_no ‘C00005’ to ’Bombay’.
UPDATE CLIENT_MASTER SET CITY = 'BOMBAY' WHERE CLIENT_NO = 'C00005'

--63) Change the delivery date of order numeric ‘O10008” to  16/08/96
UPDATE SALES_ORDER SET DELY_DATE = '19960816' WHERE S_ORDER_NO = 'O10008'

--64) Change the bal_due of client_no ‘C00001’ to 1000 
UPDATE CLIENT_MASTER SET BAL_DUE = 1000 WHERE CLIENT_NO = 'C00001'

--65) Change the cost price of ‘1.22 Floppy Drive’ to Rs. 950.00. 
UPDATE PRODUCT_MASTER SET COST_PRICE = 950 WHERE DESCRIPTION = '1.22 Floppy Drive'

--66.Create a read only view which will display Client name, city and  balance due 
CREATE VIEW CLIENT_CITY_BAL_VIEW AS
SELECT CM.NAME, CM.CITY,CM.BAL_DUE FROM CLIENT_MASTER CM UNION ALL SELECT '0','0',0 WHERE 1=0
SELECT * FROM CLIENT_CITY_BAL_VIEW

--67.Create a read only view which will display salesman name, city, sales  amount, target to get 
CREATE VIEW SALESMAN_CITY_SALAMT_TGT_VIEW AS
SELECT SM.SALESMAN_NAME,SM.CITY,SM.SAL_AMT,SM.TGT_TO_GET FROM SALESMAN_MASTER SM UNION ALL SELECT '0','0',0,0 WHERE 1=0
SELECT * FROM SALESMAN_CITY_SALAMT_TGT_VIEW

--68.Create a view which display client name, salesman name  s_oreder_no and order status 
CREATE VIEW CLIENT_SALESMANE_ORDRNO_STATUS_VIEW AS
SELECT CM.NAME,SM.SALESMAN_NAME,SO.S_ORDER_NO,SO.ORDER_STATUS 
FROM SALES_ORDER SO JOIN CLIENT_MASTER CM ON SO.CLIENT_NO = CM.CLIENT_NO JOIN SALESMAN_MASTER SM ON SO.SALESMAN_NO = SM.SALESMAN_NO
SELECT * FROM CLIENT_SALESMANE_ORDRNO_STATUS_VIEW

--69.From the sales order details table display product wise quantity  ordered 

--70.Create view which display all billed challan detail 
CREATE VIEW BILLED_CHALLAN_VIEW AS
SELECT * FROM CHALLAN_DETAILS CD WHERE CD.CHALLAN_NO IN (SELECT CH.CHALLAN_NO FROM CHALLAN_HEADER CH WHERE CH.BILLED_YN = 'Y')
SELECT * FROM BILLED_CHALLAN_VIEW

--71.Write a procedure which takes client name and display a client record  from client master table. 
CREATE PROC SHOW_CLIENT_RECORD (@CLIENTNAME VARCHAR(20)) AS
BEGIN
	SELECT * FROM CLIENT_MASTER CM WHERE CM.NAME = @CLIENTNAME
END
EXEC SHOW_CLIENT_RECORD 'Ivan Bayross'

--72.Take city name as parameter and display all client name and the balance  due and at the end total balance due from the city (total of balance_due) 
CREATE PROC CITY_CLIENT_BALANCE(@CITY VARCHAR(20)) AS
BEGIN
	DECLARE @TABLE TABLE(CLIENTNAME VARCHAR(20), BAL_DUE NUMERIC(8,2))
	INSERT INTO @TABLE SELECT CM.NAME,CM.BAL_DUE FROM CLIENT_MASTER CM WHERE CM.CITY = @CITY
	INSERT INTO @TABLE VALUES('TOTAL BAL DUE', (SELECT SUM(CM.BAL_DUE) FROM CLIENT_MASTER CM WHERE CM.CITY = @CITY) )
	SELECT * FROM @TABLE
END
EXEC CITY_CLIENT_BALANCE 'MADRAS'

--73.Write a procedure which takes product description as a parameter and  display the details 
CREATE PROC SHOW_PRODUCT_FROM_DESCRIPTION (@DESC VARCHAR(50)) AS
BEGIN
	SELECT * FROM PRODUCT_MASTER PM WHERE PM.DESCRIPTION = @DESC
END
EXEC SHOW_PRODUCT_FROM_DESCRIPTION 'MONITORS'

--74.Write a procedure which will take quantify on hand as parameter and  display all products greater then the value 
CREATE PROC PRODUCTS_GREATER_QTYONHAND (@QTYONHAND INT) AS
BEGIN
	SELECT * FROM PRODUCT_MASTER PM WHERE PM.QTY_ON_HAND > @QTYONHAND
END
EXEC PRODUCTS_GREATER_QTYONHAND 10

--75.Write a procedure which will display details for all “Floppies” product 
CREATE PROC FIND_FLOPPY_PRODUCTS AS
BEGIN
	SELECT * FROM PRODUCT_MASTER PM WHERE PM.DESCRIPTION LIKE '%FLOPPIES%'
END
EXEC FIND_FLOPPY_PRODUCTS

--76.Write a procedure which takes client name and display S_order_date,  Order Status. 
CREATE PROC ORDER_DATE_STATUS_FROM_CLIENTNAME (@CNAME VARCHAR(20)) AS
BEGIN
	SELECT SO.S_ORDER_DATE,SO.ORDER_STATUS FROM SALES_ORDER SO WHERE SO.CLIENT_NO IN
		(SELECT CM.CLIENT_NO FROM CLIENT_MASTER CM WHERE CM.NAME = @CNAME)
END
EXEC ORDER_DATE_STATUS_FROM_CLIENTNAME 'Ivan Bayross'

--77. Write a procedure which print salesman name, whose Ytd sales > 100 
CREATE PROC SALESMAN_YTD100 AS
BEGIN
	SELECT SM.SALESMAN_NAME FROM SALESMAN_MASTER SM WHERE SM.YTD_SALES >100
END
EXEC SALESMAN_YTD100

--78. Take a two S_order_date parameters and display all sales detail  between two dates. 
CREATE PROC ORDERS_BETWEEN_DATES(@START_DATE DATE,@END_DATE DATE) AS
BEGIN
	IF @START_DATE < @END_DATE
	BEGIN
		SELECT * FROM SALES_ORDER SO WHERE SO.S_ORDER_DATE BETWEEN @START_DATE AND @END_DATE
	END
	ELSE
	BEGIN
		RAISERROR('START DATE HAS TO BE LESS THAN END DATE',16,0) 
	END
END
EXEC ORDERS_BETWEEN_DATES '1-1-1990', '1-1-2020'

--79. Take bill_y/n as a parameter and list all order details like S_order_no,  S_order_date, salesman name, order status
CREATE PROC BILLED_ORDER_DETAILS(@BILLED CHAR(1)) AS
BEGIN
	SELECT SO.S_ORDER_NO,S_ORDER_DATE,SM.SALESMAN_NAME,SO.ORDER_STATUS FROM SALES_ORDER SO JOIN SALESMAN_MASTER SM ON SO.SALESMAN_NO = SM.SALESMAN_NO
	WHERE SO.BILLED_YN = @BILLED
END
EXEC BILLED_ORDER_DETAILS 'N'

--80. Takes S_order_no as a parameter and display product description and  salesman name 
CREATE PROC PRODDESC_SALESMAN_FROM_ORDERNO (@SORDNO VARCHAR(6)) AS
BEGIN
	SELECT PM.DESCRIPTION ,SM.SALESMAN_NAME FROM 
	SALES_ORDER SO JOIN SALESMAN_MASTER SM ON SO.SALESMAN_NO = SM.SALESMAN_NO
	JOIN SALES_ORDER_DETAILS SOD ON SOD.S_ORDER_NO = SO.S_ORDER_NO
	JOIN PRODUCT_MASTER PM ON SOD.PRODUCT_NO = PM.PRODUCT_NO
	WHERE SO.S_ORDER_NO = @SORDNO
END
EXEC PRODDESC_SALESMAN_FROM_ORDERNO 'O19001'

--81. Take client name as parameter and display S_order_no, S_order_date,  salesman name, order status, product description, qty ordered, product  rate and total (qty ordered * product rate) 
CREATE PROC PROD_DETAILS_FROM_CLIENTNAME (@CNAME VARCHAR(20)) AS
BEGIN
	SELECT SO.S_ORDER_NO, SO.S_ORDER_DATE,SM.SALESMAN_NAME,SO.ORDER_STATUS,PM.DESCRIPTION,SOD.QTY_ORDERED,SOD.PRODUCT_RATE, (SOD.QTY_ORDERED*SOD.PRODUCT_RATE) AS TOTAL
	FROM SALES_ORDER SO JOIN SALESMAN_MASTER SM ON SO.SALESMAN_NO = SM.SALESMAN_NO
	JOIN SALES_ORDER_DETAILS SOD ON SO.S_ORDER_NO = SOD.S_ORDER_NO
	JOIN PRODUCT_MASTER PM ON SOD.PRODUCT_NO = PM.PRODUCT_NO
	WHERE SO.CLIENT_NO IN (SELECT CM.CLIENT_NO FROM CLIENT_MASTER CM WHERE CM.NAME = @CNAME) 
END
EXEC PROD_DETAILS_FROM_CLIENTNAME 'IVAN BAYROSS'

--82. List order details (order no, client name, salesman name, product  description) where qty ordered is >= 10  
CREATE PROC ORD_DETAILS_QTY10 AS
BEGIN
	SELECT SO.S_ORDER_NO,CM.NAME,SM.SALESMAN_NAME, PM.DESCRIPTION
	FROM SALES_ORDER SO 
	JOIN CLIENT_MASTER  CM ON SO.CLIENT_NO = CM.CLIENT_NO 
	JOIN SALESMAN_MASTER SM ON SO.SALESMAN_NO = SM.SALESMAN_NO 
	JOIN SALES_ORDER_DETAILS SOD ON SO.S_ORDER_NO = SOD.S_ORDER_NO
	JOIN PRODUCT_MASTER PM ON SOD.PRODUCT_NO = PM.PRODUCT_NO
	WHERE SOD.QTY_ORDERED >= 10
END
EXEC ORD_DETAILS_QTY10

--83.Take challan no and print details (order no, challan date, client name,  salesman name, order date, order status) 
CREATE PROC CHALLAN_DETAILS_FROM_NO(@CHALLANNO VARCHAR(6)) AS
BEGIN
	SELECT CH.S_ORDER_NO,CH.CHALLAN_DATE, CM.NAME, SM.SALESMAN_NAME, SO.S_ORDER_DATE,SO.ORDER_STATUS
	FROM CHALLAN_HEADER CH 
	JOIN SALES_ORDER SO ON CH.S_ORDER_NO = SO.S_ORDER_NO 
	JOIN CLIENT_MASTER CM ON SO.CLIENT_NO = CM.CLIENT_NO 
	JOIN SALESMAN_MASTER SM ON SO.SALESMAN_NO = SM.SALESMAN_NO
	WHERE CH.CHALLAN_NO = @CHALLANNO
END

EXEC CHALLAN_DETAILS_FROM_NO 'CH3965'

--84.Take challan date month as a parameter and display challan detail like  s_order_no, s_order_date, bill y/n, delay_date, order status
CREATE PROC CHALLAN_DETAILS_FROM_MONTH(@MONTH VARCHAR(10)) AS
BEGIN
	SELECT CH.S_ORDER_NO, SO.S_ORDER_DATE,SO.BILLED_YN,SO.DELY_DATE,SO.ORDER_STATUS FROM CHALLAN_HEADER CH JOIN SALES_ORDER SO ON CH.S_ORDER_NO = SO.S_ORDER_NO
	WHERE DATENAME(MM,CH.CHALLAN_DATE) = @MONTH
END
EXEC CHALLAN_DETAILS_FROM_MONTH 'DECEMBER'

--85.Take product no as parameter and print all the orders for the products  like s_order_no, client name, salesman name 
CREATE PROC PRODUCT_DETALS_FROM_NO (@PRODNO VARCHAR(6)) AS
BEGIN
	SELECT SOD.S_ORDER_NO,CM.NAME,SM.SALESMAN_NAME FROM SALES_ORDER_DETAILS SOD 
	JOIN SALES_ORDER SO ON SOD.S_ORDER_NO = SO.S_ORDER_NO 
	JOIN CLIENT_MASTER CM ON SO.CLIENT_NO = CM.CLIENT_NO 
	JOIN SALESMAN_MASTER SM ON SO.SALESMAN_NO = SM.SALESMAN_NO
	WHERE SOD.PRODUCT_NO = @PRODNO
END
EXEC PRODUCT_DETALS_FROM_NO 'P03453'

--86.Write a procedure which print order no and order date for the salesman  kiran 
CREATE PROC ORDER_DETAIL_KIRAN AS
BEGIN
	SELECT SO.S_ORDER_NO,SO.S_ORDER_DATE FROM SALES_ORDER SO WHERE SO.SALESMAN_NO IN (SELECT SM.SALESMAN_NO FROM SALESMAN_MASTER SM WHERE SM.SALESMAN_NAME='kiran')
END
EXEC ORDER_DETAIL_KIRAN

--87. Write a procedure which takes order no as parameter and return in out  parameter total qty ordered and total qty dispatched for the order  (table sales_order) 
DROP PROC ORDER_QTYORDERED_QTYDISP
CREATE PROC ORDER_QTYORDERED_QTYDISP(@ORDNO VARCHAR(20), @QTYORD NUMERIC(10) OUT, @QTYDISP NUMERIC(10) OUT) AS
BEGIN
	SELECT @QTYORD = SUM(SO.QTY_ORDERED), @QTYDISP = SUM(SO.QTY_DISP) FROM SALES_ORDER_DETAILS SO WHERE SO.S_ORDER_NO = @ORDNO
END
SELECT * FROM SALES_ORDER
SELECT SUM(SO.QTY_ORDERED),SUM(SO.QTY_DISP) FROM SALES_ORDER_DETAILS SO WHERE SO.S_ORDER_NO = 'O10008'
DECLARE @QTYORD1 INT, @QTYDISP1 INT
EXEC ORDER_QTYORDERED_QTYDISP 'O10008', @QTYORD1 OUT, @QTYDISP1 OUT
PRINT @QTYORD1 
PRINT @QTYDISP1

--88. Write a procedure which display product description cost price, sales  price and profit amount (cost price – sales price). At the end display  total profit amount 
CREATE PROC DISPLAY_PRODUCT_PROFIT AS
BEGIN
	DECLARE @TABLE TABLE (DESCRIPTION VARCHAR(50), COST_PRICE NUMERIC(8,2), SELL_PRICE NUMERIC(8,2), PROFIT NUMERIC(8,2))
	INSERT INTO @TABLE SELECT PM.DESCRIPTION,PM.COST_PRICE,PM.SELL_PRICE,PM.SELL_PRICE - PM.COST_PRICE AS [PROFIT AMOUNT] FROM PRODUCT_MASTER PM
	INSERT INTO @TABLE VALUES ('TOTAL',NULL,NULL, (SELECT SUM(PROFIT) FROM @TABLE))
	SELECT * FROM @TABLE
END
EXEC DISPLAY_PRODUCT_PROFIT

--89.Display all the product detail where reorder level is below 5 
CREATE PROC PROD_REORDERLVL_5 AS
BEGIN
	SELECT * FROM PRODUCT_MASTER PM WHERE PM.RECORD_LVL < 5
END
EXEC PROD_REORDERLVL_5

--90. Take sales order no check if qty dispatched is less than qty ordered  than display product description , qty ordered, qty dispatched and the  difference else print the message all qty dispatched. 
CREATE PROC DISP_ORD_CHECK(@ORDNO VARCHAR(6)) AS
BEGIN
	DECLARE @DISP INT, @ORD INT
	SELECT @DISP = SUM(SOD.QTY_DISP), @ORD =SUM(SOD.QTY_ORDERED) FROM SALES_ORDER_DETAILS SOD WHERE SOD.S_ORDER_NO = @ORDNO
	IF @DISP < @ORD
	BEGIN
		SELECT PM.DESCRIPTION,SOD.QTY_ORDERED,SOD.QTY_DISP,SOD.QTY_ORDERED-SOD.QTY_DISP AS [DIFF] FROM SALES_ORDER_DETAILS SOD JOIN PRODUCT_MASTER PM ON SOD.PRODUCT_NO = PM.PRODUCT_NO
		WHERE SOD.S_ORDER_NO = @ORDNO
	END
	ELSE
	BEGIN
		PRINT 'ALL QTY DISPATCHED'
	END
END
EXEC DISP_ORD_CHECK 'O19003'

--91. Take the city name and return total no of customer count in the city
CREATE FUNCTION CUSTOMER_COUNT_CITY(@CITY VARCHAR(20))
RETURNS INT AS
BEGIN
	DECLARE @COUNT INT
	SELECT @COUNT = COUNT(CM.CLIENT_NO) FROM CLIENT_MASTER CM WHERE CM.CITY = @CITY
	RETURN @COUNT
END

SELECT DBO.CUSTOMER_COUNT_CITY('MADRAS')
--92. Take salesman name and return total order count  
CREATE FUNCTION SALESMAN_ORD_COUNT(@SALESMANNAME VARCHAR(20))
RETURNS INT AS
BEGIN
	DECLARE @COUNT INT
	SELECT @COUNT = COUNT(SO.S_ORDER_NO) FROM SALES_ORDER SO WHERE SO.SALESMAN_NO IN (SELECT SM.SALESMAN_NO FROM SALESMAN_MASTER SM WHERE SM.SALESMAN_NAME = @SALESMANNAME)
	RETURN @COUNT
END
SELECT DBO.SALESMAN_ORD_COUNT('RAVI')

--93. Write a function which takes salesman name and return target to  get. 
CREATE FUNCTION SALESMAN_TGTTOGET(@SALEMANNAME VARCHAR(6))
RETURNS INT AS
BEGIN
	DECLARE @TGT INT
	SELECT @TGT = SM.TGT_TO_GET FROM SALESMAN_MASTER SM WHERE SM.SALESMAN_NAME = @SALEMANNAME
	RETURN @TGT
END
SELECT DBO.SALESMAN_TGTTOGET('KIRAN')

--94.Write a function which will return total target to get by all the  salesman
CREATE FUNCTION TOTAL_TGT_SALESMAN()
RETURNS INT AS
BEGIN 
	DECLARE @TOTAL INT
	SELECT @TOTAL = SUM(SM.TGT_TO_GET) FROM SALESMAN_MASTER SM
	RETURN @TOTAL
END
SELECT DBO.TOTAL_TGT_SALESMAN()

--95. Take order status as a parameter and return total order count for  the order status 
CREATE FUNCTION ORDERSTATUS_COUNT(@ORDSTS VARCHAR(20))
RETURNS INT AS 
BEGIN
	DECLARE @COUNT INT
	SELECT @COUNT = COUNT(SO.S_ORDER_NO) FROM SALES_ORDER SO WHERE SO.ORDER_STATUS = @ORDSTS
	RETURN @COUNT
END
SELECT DBO.ORDERSTATUS_COUNT('CANCELED')

--96. Take year and month as a parameter to a function and return order  count 
CREATE FUNCTION SALES_COUNT_FROM_YEARMONTH(@YEAR INT, @MONTH INT)
RETURNS INT AS
BEGIN
	DECLARE @COUNT INT
	SELECT @COUNT = COUNT(SO.S_ORDER_NO) FROM SALES_ORDER SO WHERE DATEPART(YYYY,SO.S_ORDER_DATE) = @YEAR AND DATEPART(MM,SO.S_ORDER_DATE) = @MONTH
	RETURN @COUNT
END
SELECT DBO.SALES_COUNT_FROM_YEARMONTH(1996,5)

--97.Take s_order_no as a parameter to a function and return total bill  amount  
CREATE FUNCTION TOTAL_BILL_FROM_ORDNO(@ORDNO VARCHAR(6))
RETURNS NUMERIC(8,2) AS
BEGIN
	DECLARE @TOTAL NUMERIC(8,2)
	SELECT @TOTAL = SUM(SOD.PRODUCT_RATE*SOD.QTY_ORDERED) FROM SALES_ORDER_DETAILS SOD WHERE SOD.S_ORDER_NO = @ORDNO
	RETURN @TOTAL
END
SELECT DBO.TOTAL_BILL_FROM_ORDNO('O19002')

--98. Return total salesman count in the city Mumbai 
CREATE FUNCTION TOTAL_MUMBAI_SALESMAN()
RETURNS INT AS
BEGIN
	DECLARE @TOTAL INT
	SELECT @TOTAL = COUNT(SM.SALESMAN_NO) FROM SALESMAN_MASTER SM WHERE SM.CITY = 'MUMBAI'
	RETURN @TOTAL
END
SELECT DBO.TOTAL_MUMBAI_SALESMAN()

--99.Take state name and return total client in the state 
CREATE FUNCTION STATE_TOTAL_CLIENT(@STATE VARCHAR(20))
RETURNS INT AS
BEGIN
	DECLARE @TOTAL INT
	SELECT @TOTAL = COUNT(CM.CLIENT_NO) FROM CLIENT_MASTER CM WHERE CM.STATE = @STATE
	RETURN @TOTAL
END
SELECT DBO.STATE_TOTAL_CLIENT('TAMIL NADU')

--100. Take city name as parameter and return total amount of balance  due for the city 
CREATE FUNCTION CITY_BAL_DUE(@CITY VARCHAR(20))
RETURNS NUMERIC(8,2) AS
BEGIN
	DECLARE @TOTAL NUMERIC(8,2)
	SELECT @TOTAL = SUM(CM.BAL_DUE) FROM CLIENT_MASTER CM WHERE CM.CITY = @CITY
	RETURN @TOTAL
END
SELECT DBO.CITY_BAL_DUE('MADRAS')


-----observations

INSERT INTO CHALLAN_DETAILS VALUES('CH9001','P00001',5)
--OBSERVATION 1 ERROR CANNOT INSERT DUPLICATE KEY DUE TO PRIMARY KEY CONSTRAINT

INSERT INTO CHALLAN_DETAILS VALUES ('P785341','P06734',9)
--OBSERVATION 2 ERROR STRING OR BINARY DATA WOULD BE TRUNCATED 

INSERT INTO CHALLAN_DETAILS VALUES('P00001','CH9001',1)
--OBSERVATION 3 ERROR FOREIGN KEY CONFLICT 


-----create copy of existing table

SELECT *
INTO PRODUCT_MASTER_COPY
FROM PRODUCT_MASTER;

------------------------------------
DROP TABLE PRODUCT_MASTER
--OBSERVATION 4 CANNOT DROP TABLE BECAUSE IT IS REFERENCED BY FROEIGN KEY

SELECT *
INTO CHALLAN_DETAILS_COPY
FROM CHALLAN_DETAILS;

SELECT *
INTO CHALLAN_HEADER_COPY
FROM CHALLAN_HEADER
-------------

DROP TABLE CHALLAN_DETAILS
--SUCCESS

DROP TABLE CHALLAN_HEADER
--SUCCESS

DROP TABLE PRODUCT_MASTER
--CANNOT DROP DUE TO FOREIGN KEY
--THERE IS STILL ONE FOREIGN KEY FROM PRODUCT MASTER
--EVEN IF ONE TABLE IS REFERENCEING BASE TABEL AS FOREIGN KEY THEN THE TABLE CANNOT BE DROPPED

SELECT * FROM PRODUCT_MASTER_COPY












